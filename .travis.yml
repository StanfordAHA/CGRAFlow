language: c
dist: trusty

cache: apt

compiler:
  - gcc
  
before_install:

  # If timer has been set on checkin, then turn on debugging for the next five minutes.
  #   To set timer:   .travistimer.csh -set
  #   To reset timer: .travistimer.csh -reset
  #   To check timer: .travistimer.csh  (stdout = "valid" or "expired")
  #   Verbose timer:  .travistimer.csh -v
  - if [[ `./.travistimer.csh -v` == "valid" ]]; then CGRA_QUICKTEST=true; fi
  
  # When CGRA_QUICKTEST true, bypass some of the slower parts of the script for quick debugging
  # With quicktest: 5 minutes.  Without quicktest: 45 minutes.
  - if [[ -v CGRA_QUICKTEST ]]; then
      echo QUICKTEST ON;
      BYPASS_COREIR=true;
      BYPASS_MAPPER=true;
    fi
  
  - pip install virtualenv
  - virtualenv -p /usr/bin/python3 CGRAFlowPy3Env
  - source CGRAFlowPy3Env/bin/activate

  - git clone https://github.com/jeffsetter/Halide_CoreIR.git
  - export CXX=${CXX_}
  - export CC=${CC_}
  - export LLVM_CONFIG=${TRAVIS_BUILD_DIR}/llvm/bin/llvm-config
  - export CLANG=${TRAVIS_BUILD_DIR}/llvm/bin/clang
  - export CORECONFIG="g++-4.9"
  - export COREIR_DIR=${TRAVIS_BUILD_DIR}/coreir

  - echo "INSTALL RIGEL"
  - git clone https://github.com/jameshegarty/rigel.git
  - export PKG_CONFIG_PATH=${TRAVIS_BUILD_DIR}/rigel/platform/verilator
  - pkg-config --cflags verilator
  - pkg-config --variable=includedir verilator

  #- wget https://github.com/zdevito/terra/releases/download/release-2016-02-26/terra-Linux-x86_64-2fa8d0a.zip
  # - unzip terra-Linux-x86_64-2fa8d0a.zip

  - if [[ -v BYPASS_COREIR ]]; then
       echo "BYPASS COREIR";
    else
        git clone https://github.com/rdaly525/coreir.git;
        export CORECONFIG="g++-4.9";
        make -C coreir/src;
        make -C coreir/src ../build/coreir.so;
        make -C coreir/tests;
        pip install pytest;
        cd coreir;
          pip install -e bindings/python;
        cd ..;
    fi

  # I think it might be lost again...here's a quick reset.
  - cd ${TRAVIS_BUILD_DIR};

  - if [[ -v BYPASS_MAPPER ]]; then
       echo "BYPASS MAPPER";
    else
        git clone https://github.com/StanfordAHA/CGRAMapper.git;
        cd CGRAMapper/mapper;
          make;
        cd ../../;
    fi

  - date
  - git clone https://github.com/StanfordAHA/CGRAGenerator.git

  - git clone https://github.com/cdonovick/smt-pnr

install:
  -  pwd
  
  # Halide
  - wget http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz
  - tar xvf clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz
  - mv clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04 ${TRAVIS_BUILD_DIR}/llvm

  # pnr
    # Install monosat from Lenny's binary (ping him to rebuild it if newer features are needed)
  - wget http://web.stanford.edu/~lenny/files/monosat_binary_03182017.tar.gz
  - tar -xvf monosat_binary_03182017.tar.gz
  - export PATH=$PATH:$PWD/monosat_binary/bin
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/monosat_binary/lib
  - pip install -e monosat_binary/python
    # Install z3 from release binary
  - wget https://github.com/Z3Prover/z3/releases/download/z3-4.5.0/z3-4.5.0-x64-ubuntu-14.04.zip
  - unzip z3-4.5.0-x64-ubuntu-14.04.zip
  - export PATH=$PATH:$PWD/z3-4.5.0-x64-ubuntu-14.04/bin/
  - export PYTHONPATH=$PYTHONPATH:$PWD/z3-4.5.0-x64-ubuntu-14.04/bin/python/
  - sudo ln -s $PWD/z3-4.5.0-x64-ubuntu-14.04/bin/libz3.so /usr/lib/libz3.so
  - pip install pygraphviz
  - pip install lxml

script:
  - export RUN_TESTS=false

  # Halide files needed are already in the repo

  # This is where Halide actually compiles our app
  # and runs it to build our comparison output parrot "halide_out.png"
  # as well as the DAG "design_top.json"(?) for the mapper.
  #
  - echo "Halide FLOW"
  - cd Halide_CoreIR
  # remake the json and cpu output image for our test app
  - make -C apps/coreir_examples/pointwise/ clean design_top.json out.png
  # copy over all pertinent files
  - cp apps/coreir_examples/pointwise/design_top.json ../build
  - cp apps/images/gray.png ../build/input.png
  - cp apps/coreir_examples/pointwise/out.png ../build/halide_out.png
  - cd ..

  # "stream" command appears to be broken, emitting huge output files filled with zeroes(?)
  # - stream build/input.png build/input.raw
  # - stream build/halide_out.png build/halide_out.raw

  # This uncompresses the input and output parrots to make them more useful...
  # Using my (steveri) hacky convert script instead...
  - convert=${TRAVIS_BUILD_DIR}/CGRAGenerator/verilator/generator_z_tb/io/myconvert.csh
  - $convert build/input.png build/input.raw
  - $convert build/halide_out.png build/halide_out.raw

  # Just to prove that they aren't zero anymore...
  # Also, I guess we should be able to see the bytes in halide_out == 2*input
  - od -t u1 build/input.raw | head
  - od -t u1 build/halide_out.raw | head

  - ls -la build

  - cat build/design_top.json
#  - xxd build/input.png
#  - xxd build/input.raw
#  - xxd build/halide_out.png
#  - xxd build/halide_out.raw

  # FIXME/TODO oops Jeff's recent change broke the flow.
  # This temporary hack lets it pass, but it must be fixed!
  # sr 4/10 I turned off the hack so script will fail until flow is fixed...
  # - mv build/design_top.json /tmp/design_top.json
  # - sed 's/const_186/const/' /tmp/design_top.json > build/design_top.json
  # - grep const build/design_top.json /tmp/design_top.json

  # Mapper uses DAG output "design_top.json" from Halide compiler
  # to produce a mapped version "mapped.json" for the PNR folks.  Right?
  #
  - echo "MAPPER"
  - ./CGRAMapper/build/main build/design_top.json build/mapped.json
  - ls -la build
  - cat build/mapped.json

   # coreir
  - cd coreir/tests
  - ./run
  - pytest  # Test python bindings
  - cd ../..
  
    # rigel
  - cd rigel/examples
  - make out/pointwise_wide_handshake.verilator.bmp
  - cd ../../
  


  # CGRA setup
  - echo CGRA setup for CGRAFLOW travis script
  - cgroot=${TRAVIS_BUILD_DIR}/CGRAGenerator;
  - cgbuild=${TRAVIS_BUILD_DIR}/build;

  # CGRA generate
  - echo "CGRA generate (generates CGRA + connection matrix for pnr)" - `date`
  - pushd $cgroot; ./travis-test.csh; popd

  # pnr
  # Uses mapper oupru "mapped.json" plus CGRA connection matrix "cgra_info"
  # to produce placed and routed "mapped.xml" and "io.xml"
  # (note name collision mapped.json vs. mapped.xml)
  - cd ${TRAVIS_BUILD_DIR}/smt-pnr/src/
  - ./test.py
    ../../build/mapped.json
    ../../CGRAGenerator/hardware/generator_z/top/cgra_info.txt
    ../../build/mapped.xml
    ../../build/io.xml
    
  # Bitstream build
  # translates PNR output "mapped.xml" into a bitstream "config.dat" for programming the CGRA
  - echo "Build bitstream for programming CGRA" - `date`
  - cd $cgbuild
  - perl $cgroot/bitstream/example3/gen_bitstream.pl
       $cgbuild/mapped.xml
       $cgbuild/config


  # CGRA program and run ((theoretically) uses output of pnr)
  - echo "CGRA program and run (uses output of pnr)" - `date`
  - pushd $cgroot/verilator/generator_z_tb
  - ./run.csh top_tb.cpp
        -config $cgbuild/config.dat
        -io     $cgbuild/io.xml
        -input  ${TRAVIS_BUILD_DIR}/build/input.png
        -output ${TRAVIS_BUILD_DIR}/build/CGRA_out.raw
        -nclocks 5M
  - popd

  # Check to see that output is correct.
  # - ls -l ${TRAVIS_BUILD_DIR}/build/*.{raw,png}
  - ls -l ${TRAVIS_BUILD_DIR}/build/*.raw
  - od -t u1 -w1 -v -A none ${TRAVIS_BUILD_DIR}/build/input.raw      > /tmp/input.od
  - od -t u1 -w1 -v -A none ${TRAVIS_BUILD_DIR}/build/halide_out.raw > /tmp/halide_out.od
  - od -t u1 -w1 -v -A none ${TRAVIS_BUILD_DIR}/build/CGRA_out.raw   > /tmp/CGRA_out.od
  - cmp ${TRAVIS_BUILD_DIR}/build/{halide_out.raw,CGRA_out.raw}
  - diff /tmp/halide_out.od /tmp/CGRA_out.od |& head -500

  # - sed -n '/90,110p' /tmp/input.od
  # - sed -n '90,110p' /tmp/halide_out.od
  # - sed -n '90,110p' /tmp/CGRA_out.od




addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      # rigel
      - verilator
      - luajit

      # coreir
      - build-essential
      - clang

      # halide
      - g++-4.9
      - libedit-dev
      - libpng-dev

      # CGRAGEN
      - csh

      # pnr
      - libgmp3-dev
      - git
      - cmake
      - zlib1g
      - zlib1g-dev
      - graphviz-dev
      - python3

      # convert png to raw
      - imagemagick
env:
  # halide
  - LLVM_VERSION=3.7.1 BUILD_SYSTEM=MAKE CXX_=g++-4.9 CC_=gcc-4.9



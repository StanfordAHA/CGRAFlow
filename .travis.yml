language: c
dist: trusty

cache: apt

compiler:
  - gcc
  
before_install:
  # To bypass some of the slower parts of the script for debugging, you can set e.g. CGRA_QUICKTEST
  # Remember to turn it off (comment-out) again when you're done debugging!
  # - CGRA_QUICKTEST=true
  - if [[ -v CGRA_QUICKTEST ]]; then BYPASS_COREIR=true; fi
  
  - pip install virtualenv
  - virtualenv -p /usr/bin/python3 CGRAFlowPy3Env
  - source CGRAFlowPy3Env/bin/activate

  - git clone https://github.com/jeffsetter/Halide_CoreIR.git
  - export CXX=${CXX_}
  - export CC=${CC_}
  - export LLVM_CONFIG=${TRAVIS_BUILD_DIR}/llvm/bin/llvm-config
  - export CLANG=${TRAVIS_BUILD_DIR}/llvm/bin/clang
  - export CORECONFIG="g++-4.9"
  - export COREIR_DIR=${TRAVIS_BUILD_DIR}/coreir

  - echo "INSTALL RIGEL"
  - git clone https://github.com/jameshegarty/rigel.git
  - export PKG_CONFIG_PATH=${TRAVIS_BUILD_DIR}/rigel/platform/verilator
  - pkg-config --cflags verilator
  - pkg-config --variable=includedir verilator

 #- wget https://github.com/zdevito/terra/releases/download/release-2016-02-26/terra-Linux-x86_64-2fa8d0a.zip
 # - unzip terra-Linux-x86_64-2fa8d0a.zip

  # Hope this isn't too ugly for you; it solves problems for me (steveri);
  # also I'm sure there's a better way to do this but I didn't find it...
  - if [[ ! -v BYPASS_COREIR ]]; then git clone https://github.com/rdaly525/coreir.git; fi
  - if [[ ! -v BYPASS_COREIR ]]; then export CORECONFIG="g++-4.9"; fi
  - if [[ ! -v BYPASS_COREIR ]]; then make -C coreir/src; fi
  - if [[ ! -v BYPASS_COREIR ]]; then make -C coreir/src ../build/coreir.so; fi
  - if [[ ! -v BYPASS_COREIR ]]; then make -C coreir/tests; fi
  - if [[ ! -v BYPASS_COREIR ]]; then pip install pytest; fi
  - if [[ ! -v BYPASS_COREIR ]]; then cd coreir; fi
  - if [[ ! -v BYPASS_COREIR ]]; then pip install -e bindings/python; fi
  - if [[ ! -v BYPASS_COREIR ]]; then cd ..; fi


  - git clone https://github.com/StanfordAHA/CGRAMapper.git
  - cd CGRAMapper/mapper
  - make
  - cd ../../

  - git clone https://github.com/StanfordAHA/CGRAGenerator.git

  - git clone https://github.com/cdonovick/smt-pnr

install:
  -  pwd
  
  # Halide
  - wget http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz
  - tar xvf clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz
  - mv clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04 ${TRAVIS_BUILD_DIR}/llvm

  # pnr
    # Install monosat from Lenny's binary (ping him to rebuild it if newer features are needed)
  - wget http://web.stanford.edu/~lenny/files/monosat_binary_03182017.tar.gz
  - tar -xvf monosat_binary_03182017.tar.gz
  - export PATH=$PATH:$PWD/monosat_binary/bin
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/monosat_binary/lib
  - pip install -e monosat_binary/python
    # Install z3 from release binary
  - wget https://github.com/Z3Prover/z3/releases/download/z3-4.5.0/z3-4.5.0-x64-ubuntu-14.04.zip
  - unzip z3-4.5.0-x64-ubuntu-14.04.zip
  - export PATH=$PATH:$PWD/z3-4.5.0-x64-ubuntu-14.04/bin/
  - export PYTHONPATH=$PYTHONPATH:$PWD/z3-4.5.0-x64-ubuntu-14.04/bin/python/
  - sudo ln -s $PWD/z3-4.5.0-x64-ubuntu-14.04/bin/libz3.so /usr/lib/libz3.so
  - pip install pygraphviz

script:
  - export RUN_TESTS=false

  # halide
  - if [[ ! -v RUN_TESTS ]]; then echo "Run Halide Tests"; fi
  - if [[ ! -v RUN_TESTS ]]; then cd Halide_CoreIR; fi
  - if [[ ! -v RUN_TESTS ]]; then test/scripts/build_travis.sh; fi
  - if [[ ! -v RUN_TESTS ]]; then cd ..; fi

  - echo "Halide FLOW"
  - cd Halide_CoreIR
  - make -C apps/coreir_examples/pointwise/
  - cp apps/coreir_examples/pointwise/design_top.json ../build
  - cd ..
  - ls -la build
  - cat build/design_top.json
  - cd ..

  - echo "MAPPER"
  - ./CGRAMapper/build/main build/design_top.json build/mapped.json
  - ls -la build
  - cat build/mapped.json

   # coreir
  - cd coreir/tests
  - ./run
  - pytest  # Test python bindings
  - cd ../..
  
    # rigel
  - cd rigel/examples
  - make out/pointwise_wide_handshake.verilator.bmp
  - cd ../../
  
  # Is this still set?
  - if [[ -v BYPASS_COREIR ]]; then echo BYPASS_COREIR set; else echo BYPASS_COREIR unset; fi

  
  # CGRA generate (generates connection matrix for pnr)
  - echo "BEGIN CGRA GENERATE"
  # - pwd; pushd ${TRAVIS_BUILD_DIR}; ls -l
  - pushd ${TRAVIS_BUILD_DIR}/CGRAGenerator
  - ./travis-test.csh
  # [steveri] What's this (below)?  It looks wrong!
  #- export PKG_CONFIG_PATH=/home/travis/build/StanfordAHA/CGRAGenerator/platform/verilator
  - popd

  # pnr
  - cd smt-pnr/mothball/new
  - ./demo.sh
  - cd ../../../
  
  # CGRA program and run (uses output of pnr)
  - echo "BEGIN CGRA PROGRAM/RUN"
  - pushd ${TRAVIS_BUILD_DIR}/CGRAGenerator/verilator/generator_z_tb
  - ./run.csh top_tb.cpp -config ../../hardware/generator_z/top_tb/tile_config.dat
  # steveri: i don't trust these relative paths!
  # - cd ../../../
  - popd

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      # rigel
      - verilator
      - luajit

      # coreir
      - build-essential
      - clang

      # halide
      - g++-4.9
      - libedit-dev
      - libpng-dev

      # CGRAGEN
      - csh

      # pnr
      - libgmp3-dev
      - git
      - cmake
      - zlib1g
      - zlib1g-dev
      - graphviz-dev
      - python3

env:
  # halide
  - LLVM_VERSION=3.7.1 BUILD_SYSTEM=MAKE CXX_=g++-4.9 CC_=gcc-4.9

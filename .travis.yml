language: c
dist: trusty

cache: apt

compiler:
  - gcc
  
before_install:
  - pip install virtualenv
  - virtualenv -p /usr/bin/python3 CGRAFlowPy3Env
  - source CGRAFlowPy3Env/bin/activate

  - # pull our modified halide repo and setup halide env vars
  - git clone https://github.com/jeffsetter/Halide_CoreIR.git
  - source Halide_CoreIR/test/scripts/before_install_travis.sh

  - git clone https://github.com/rdaly525/coreir.git;
  - export CORECONFIG="g++-4.9";
  - make -C coreir/src;
  - make -C coreir/src ../build/coreir.so;
  - make -C coreir/tests;
  - pip install pytest;
  - cd coreir;
  -   pip install -e bindings/python;
  - cd ..;

  # I think the script might be lost...here's a quick reset.
  - cd ${TRAVIS_BUILD_DIR};

  - git clone https://github.com/StanfordAHA/CGRAMapper.git;
  - cd CGRAMapper/mapper;
  -   make;
  - cd ../../;

  - date
  - git clone https://github.com/StanfordAHA/CGRAGenerator.git

  - git clone https://github.com/cdonovick/smt-pnr

install:
  -  pwd
  
  # Halide installation (llvm, etc.)
  - ${TRAVIS_BUILD_DIR}/Halide_CoreIR/test/scripts/install_travis.sh

  # pnr
    # Install monosat from Lenny's binary (ping him to rebuild it if newer features are needed)
  - wget http://web.stanford.edu/~lenny/files/monosat_binary_03182017.tar.gz
  - tar -xvf monosat_binary_03182017.tar.gz
  - export PATH=$PATH:$PWD/monosat_binary/bin
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/monosat_binary/lib
  - pip install -e monosat_binary/python
    # Install z3 from release binary
  - wget https://github.com/Z3Prover/z3/releases/download/z3-4.5.0/z3-4.5.0-x64-ubuntu-14.04.zip
  - unzip z3-4.5.0-x64-ubuntu-14.04.zip
  - export PATH=$PATH:$PWD/z3-4.5.0-x64-ubuntu-14.04/bin/
  - export PYTHONPATH=$PYTHONPATH:$PWD/z3-4.5.0-x64-ubuntu-14.04/bin/python/
  - sudo ln -s $PWD/z3-4.5.0-x64-ubuntu-14.04/bin/libz3.so /usr/lib/libz3.so
  - pip install pygraphviz
  - pip install lxml

script:
  # "set -e" means "die at first error" - seems like a good idea!
  - set -e

  # FIXME Is this still used (RUN_TESTS env var)?
  # I think Jeff added it to prevent Halide from running
  # extensive tests during install?
  - export RUN_TESTS=false

  # Halide files needed are already in the repo

  # This is where Halide actually compiles our app and runs
  # it to build our comparison output parrot "halide_out.png"
  # as well as the DAG "design_top.json" for the mapper.
  #
  - echo "Halide FLOW"
  - cd Halide_CoreIR
      # remake the json and cpu output image for our test app
  -   make -C apps/coreir_examples/pointwise/ clean design_top.json out.png
      # copy over all pertinent files
  -   cp apps/coreir_examples/pointwise/design_top.json ../build
  -   cp apps/images/gray.png                           ../build/input.png
  -   cp apps/coreir_examples/pointwise/out.png         ../build/halide_out.png
  - cd ..

  - ls -la build

  - echo "CONVERT PNG IMAGES TO RAW for visual inspection"
  # Could not get "stream" command to work, so using my (steveri) hacky convert script instead...
  - cd ${TRAVIS_BUILD_DIR}
  - convert=${TRAVIS_BUILD_DIR}/CGRAGenerator/verilator/generator_z_tb/io/myconvert.csh
  - $convert build/input.png      build/input.raw
  - $convert build/halide_out.png build/halide_out.raw

  - echo "VISUALLY CONFIRM THAT OUT = 2*IN"
  - od -t u1 build/input.raw      | head
  - od -t u1 build/halide_out.raw | head

  - ls -la build

  - cat build/design_top.json
#  - xxd build/input.png
#  - xxd build/input.raw
#  - xxd build/halide_out.png
#  - xxd build/halide_out.raw


  # Mapper uses DAG output "design_top.json" from Halide compiler
  # to produce a mapped version "mapped.json" for the PNR folks.  Right?
  #
  - echo "MAPPER"
  - ./CGRAMapper/build/main build/design_top.json build/mapped.json
  - ls -la build
  - cat build/mapped.json



  ##############################################################################

  # CGRA generate
  - echo "CGRA generate (generates CGRA + connection matrix for pnr)" - `date`
  - pushd ${TRAVIS_BUILD_DIR}/CGRAGenerator; ./travis-test.csh; popd

  # pnr
  # IN:  mapped.json      # Output from mapper
  #      cgra_info.txt    # Fully-populated connection matrix from CGRA generator
  # OUT: mapped.xml       # Sparse connection matrix map for CGRA
  #      io.xml           # I/O pin information for CGRA
  #
  - cd ${TRAVIS_BUILD_DIR}/smt-pnr/src/
  - ./test.py
    ../../build/mapped.json
    ../../CGRAGenerator/hardware/generator_z/top/cgra_info.txt
    ../../build/mapped.xml
    ../../build/io.xml



  # bitstream build
  # IN:  mapped.xml    (Sparse connection matrix map from PNR)
  # OUT: config.dat    (Bitstream for programming CGRA)
  # 
  # FIXME this is a terrible place for the perl script to live
  # FIXME don't worry soon it will be replaced by Caleb's script
  #
  - echo "Build bitstream for programming CGRA" - `date`
  - EXAMPLE3=${TRAVIS_BUILD_DIR}/CGRAGenerator/bitstream/example3
  - ls -l ${EXAMPLE3}/gen_bitstream.pl
       ${TRAVIS_BUILD_DIR}/build/mapped.xml
  - perl ${EXAMPLE3}/gen_bitstream.pl
       ${TRAVIS_BUILD_DIR}/build/mapped.xml
       ${TRAVIS_BUILD_DIR}/build/config
       || exit -1


  ##############################################################################
  # Little temporary hack to get around instabilities above when/if needed.
  # - EXAMPLE3=${TRAVIS_BUILD_DIR}/CGRAGenerator/bitstream/example3;
  # - cp ${EXAMPLE3}/PNRguys_config.dat ${TRAVIS_BUILD_DIR}/build/config.dat;
  # - cp ${EXAMPLE3}/PNRguys_io.xml     ${TRAVIS_BUILD_DIR}/build/io.xml;
  ##############################################################################

  # cgra program and run
  # IN:  config.dat    (Bitstream for programming CGRA)
  #      io.xml        (I/O pin information for CGRA)
  #      input.png     (Input image)
  # OUT: CGRA_out.raw  (Output image)
  #
  - echo "CGRA program and run (uses output of pnr)" - `date`
  - cd ${TRAVIS_BUILD_DIR}/CGRAGenerator/verilator/generator_z_tb
  - ./run.csh top_tb.cpp
        -config ${TRAVIS_BUILD_DIR}/build/config.dat
        -io     ${TRAVIS_BUILD_DIR}/build/io.xml
        -input  ${TRAVIS_BUILD_DIR}/build/input.png
        -output ${TRAVIS_BUILD_DIR}/build/CGRA_out.raw
        -nclocks 5M


  # check to see that output is correct.

  - echo "BYTE-BY-BYTE COMPARE OF CGRA VS. HALIDE OUTPUT IMAGES"
  - ls -l ${TRAVIS_BUILD_DIR}/build/*.raw
  - cmp   ${TRAVIS_BUILD_DIR}/build/halide_out.raw
          ${TRAVIS_BUILD_DIR}/build/CGRA_out.raw

  - echo "VISUAL COMPARE OF CGRA VS. HALIDE OUTPUT BYTES (should be null)"
  - od -t u1 -w1 -v -A none ${TRAVIS_BUILD_DIR}/build/halide_out.raw > /tmp/halide_out.od
  - od -t u1 -w1 -v -A none ${TRAVIS_BUILD_DIR}/build/CGRA_out.raw   > /tmp/CGRA_out.od
  - diff /tmp/halide_out.od
         /tmp/CGRA_out.od
         |& head -500



addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      # rigel
      - verilator
      - luajit

      # coreir
      - build-essential
      - clang

      # halide
      - g++-4.9
      - libedit-dev
      - libpng-dev

      # CGRAGEN
      - csh

      # pnr
      - libgmp3-dev
      - git
      - cmake
      - zlib1g
      - zlib1g-dev
      - graphviz-dev
      - python3

      # convert png to raw
      - imagemagick
env:
  # halide
  - LLVM_VERSION=3.7.1 BUILD_SYSTEM=MAKE CXX_=g++-4.9 CC_=gcc-4.9
